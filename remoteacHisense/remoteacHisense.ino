#include <ESP8266WiFi.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <ArduinoJson.h>
#include <ESP8266HTTPClient.h>

// WiFi Configuration
const char* ssid = "Tselhome-7A14";
const char* password = "81190678";

// Server Configuration
const String baseURL = "http://192.168.8.106:8080/api/payloads/DEV017";
const unsigned long HTTP_TIMEOUT = 5000;  // HTTP timeout (ms)
const unsigned long UPDATE_INTERVAL = 5000;  // Data fetch interval (ms)
const int MAX_HTTP_RETRIES = 3;  // Maximum HTTP retries

// IR Pin and Frequency
const uint16_t kIrLedPin = 4;  // GPIO4 = D2 on NodeMCU
const uint16_t kFrequency = 38;  // IR carrier frequency (kHz, typical for COOLIX)
IRsend irsend(kIrLedPin);

// IR Command Structure
struct IRCommand {
  const char* name;
  const uint16_t* rawData;  // Pointer to raw data array
  size_t rawLength;         // Length of raw data array
  const char* description;
};

// Raw IR Data (Hardcoded)
const uint16_t rawPowerOn[] = {9010, 4454, 552, 1710, 532, 1714, 532, 544, 554, 548, 554, 552, 554, 556, 554, 558, 554, 1720, 532, 538, 552, 1714, 532, 1718, 528, 550, 554, 552, 556, 554, 554, 560, 554, 548, 554, 536, 554, 542, 554, 1718, 530, 550, 556, 550, 554, 556, 558, 556, 554, 546, 528, 564, 554, 1714, 534, 542, 554, 548, 554, 1724, 532, 556, 554, 558, 556, 546, 554, 538, 554, 540, 554, 544, 554, 548, 554, 552, 554, 556, 556, 558, 552, 548, 554, 538, 556, 540, 556, 544, 554, 548, 554, 552, 554, 554, 556, 558, 556, 532, 554, 7986, 552, 538, 554, 542, 556, 544, 554, 548, 554, 552, 554, 554, 554, 558, 554, 1720, 532, 538, 554, 540, 556, 544, 554, 550, 554, 552, 556, 554, 556, 558, 554, 546, 556, 536, 554, 540, 554, 546, 554, 548, 556, 550, 554, 556, 554, 558, 554, 546, 554, 538, 554, 540, 554, 544, 556, 548, 554, 552, 552, 556, 554, 558, 554, 548, 554, 536, 554, 542, 554, 544, 556, 548, 556, 550, 554, 554, 556, 558, 556, 546, 554, 538, 556, 540, 554, 544, 554, 548, 552, 552, 554, 556, 554, 556, 556, 546, 556, 536, 554, 542, 530, 570, 554, 548, 548, 558, 554, 554, 532, 582, 532, 570, 532, 560, 534, 1732, 540, 1710, 540, 568, 508, 1742, 546, 570, 534, 578, 534, 1678, 558, 7980, 558, 538, 552, 542, 552, 546, 552, 550, 554, 552, 554, 556, 552, 558, 554, 548, 554, 1688, 554, 542, 554, 546, 554, 548, 554, 552, 554, 556, 554, 558, 554, 546, 556, 536, 554, 542, 530, 568, 530, 572, 552, 554, 554, 556, 554, 560, 554, 548, 554, 538, 552, 544, 552, 546, 552, 550, 552, 554, 554, 556, 552, 562, 552, 572, 528, 564, 528, 566, 530, 570, 530, 1722, 530, 1726, 530, 1730, 528, 586, 526, 574, 526, 566, 526, 570, 526, 574, 524, 578, 524, 582, 546, 562, 546, 568, 544, 556, 544, 1722, 520, 552, 544, 554, 544, 1732, 520, 1736, 520, 1740, 520, 594, 520, 568, 496};
const uint16_t rawPowerOff[] = {9016, 4456, 554, 1710, 532, 1714, 534, 544, 556, 548, 554, 552, 554, 556, 556, 558, 532, 1744, 534, 536, 554, 1714, 532, 1718, 534, 548, 554, 552, 556, 556, 554, 558, 554, 548, 554, 538, 554, 542, 556, 1716, 532, 550, 554, 554, 552, 556, 554, 560, 556, 546, 554, 538, 556, 1712, 534, 546, 554, 548, 554, 1724, 534, 556, 554, 558, 556, 546, 556, 536, 554, 542, 554, 546, 556, 548, 556, 552, 554, 556, 554, 558, 556, 546, 554, 538, 554, 542, 556, 544, 554, 548, 554, 552, 556, 554, 554, 560, 554, 534, 556, 7988, 554, 538, 556, 540, 556, 544, 556, 548, 556, 552, 556, 554, 556, 556, 554, 1720, 534, 538, 554, 542, 554, 546, 554, 548, 554, 552, 554, 556, 556, 558, 554, 548, 554, 538, 556, 540, 556, 544, 554, 548, 556, 552, 554, 556, 554, 560, 554, 548, 554, 538, 532, 564, 530, 570, 532, 572, 532, 576, 558, 554, 558, 580, 508, 594, 532, 560, 528, 568, 534, 566, 532, 570, 534, 574, 534, 576, 530, 578, 542, 566, 504, 562, 530, 566, 550, 548, 556, 548, 554, 552, 556, 554, 554, 560, 556, 546, 576, 516, 554, 540, 556, 544, 556, 548, 554, 552, 556, 554, 556, 558, 554, 548, 554, 538, 530, 1738, 526, 1704, 552, 550, 554, 1724, 532, 556, 554, 558, 554, 1708, 532, 8010, 532, 540, 552, 544, 554, 546, 552, 552, 552, 578, 530, 580, 530, 584, 528, 572, 530, 1714, 530, 568, 526, 572, 526, 578, 526, 580, 526, 584, 526, 588, 526, 576, 526, 568, 524, 572, 546, 554, 544, 558, 544, 562, 546, 564, 546, 568, 544, 558, 544, 548, 544, 552, 544, 556, 544, 558, 544, 586, 520, 590, 520, 586, 526, 582, 520, 572, 520, 576, 520, 578, 520, 1734, 520, 586, 520, 1742, 518, 594, 520, 582, 518, 574, 520, 576, 520, 580, 520, 584, 518, 588, 520, 590, 520, 594, 520, 582, 520, 1726, 516, 578, 518, 582, 518, 1760, 494, 586, 520, 1768, 494, 594, 520, 570, 494};
const uint16_t rawTemp16[] = {8992, 4452, 556, 1706, 532, 1714, 532, 544, 552, 550, 556, 550, 554, 556, 554, 560, 554, 1718, 534, 536, 554, 1712, 532, 1716, 534, 548, 554, 552, 552, 556, 554, 558, 554, 548, 554, 538, 554, 540, 556, 544, 554, 548, 554, 552, 556, 554, 554, 558, 554, 548, 554, 538, 554, 1712, 532, 546, 554, 548, 554, 552, 554, 556, 556, 554, 556, 546, 554, 538, 554, 540, 554, 544, 554, 548, 554, 552, 554, 556, 554, 558, 554, 548, 554, 538, 554, 540, 556, 542, 556, 546, 554, 552, 554, 556, 552, 560, 554, 534, 554, 7984, 554, 538, 554, 540, 556, 544, 556, 548, 554, 552, 554, 554, 556, 556, 554, 1718, 534, 538, 554, 540, 554, 546, 554, 548, 556, 550, 556, 554, 552, 560, 554, 548, 552, 538, 556, 540, 554, 544, 556, 548, 554, 552, 554, 554, 554, 558, 554, 546, 554, 538, 554, 542, 554, 544, 554, 548, 556, 550, 556, 554, 554, 558, 556, 546, 554, 538, 554, 542, 554, 544, 554, 548, 556, 550, 556, 554, 554, 558, 554, 546, 556, 536, 554, 542, 552, 546, 556, 548, 552, 554, 554, 554, 554, 560, 552, 548, 554, 538, 552, 542, 530, 568, 554, 550, 554, 552, 530, 580, 556, 558, 554, 546, 554, 538, 556, 1708, 538, 544, 558, 546, 530, 600, 534, 574, 534, 578, 534, 1698, 544, 7976, 558, 560, 528, 544, 558, 564, 528, 548, 554, 552, 554, 556, 554, 558, 554, 548, 554, 538, 554, 1692, 554, 546, 554, 550, 552, 552, 554, 556, 554, 560, 554, 546, 554, 538, 554, 540, 554, 546, 554, 548, 554, 554, 552, 556, 552, 560, 552, 550, 552, 540, 552, 544, 552, 570, 530, 574, 530, 576, 528, 580, 530, 584, 528, 574, 528, 564, 528, 568, 528, 572, 526, 1724, 528, 1728, 528, 1732, 528, 584, 528, 574, 526, 566, 528, 568, 526, 574, 524, 578, 526, 582, 524, 586, 546, 568, 544, 558, 544, 548, 544, 1726, 520, 556, 544, 1732, 520, 1736, 520, 1740, 522, 590, 520, 570, 496};
const uint16_t rawTemp17[] = {9008, 4476, 534, 1708, 534, 1712, 532, 546, 554, 548, 554, 552, 554, 554, 556, 558, 554, 1718, 534, 538, 552, 1714, 532, 1716, 532, 548, 556, 550, 554, 554, 556, 558, 556, 546, 554, 538, 554, 540, 556, 544, 554, 548, 554, 552, 556, 554, 554, 558, 554, 546, 556, 534, 556, 1712, 534, 544, 554, 550, 554, 550, 554, 1726, 532, 560, 556, 546, 554, 536, 556, 540, 554, 546, 554, 548, 554, 552, 530, 580, 554, 558, 556, 546, 554, 538, 554, 540, 554, 544, 556, 548, 554, 552, 554, 554, 554, 558, 554, 534, 554, 7984, 556, 536, 556, 540, 554, 544, 554, 548, 552, 554, 552, 556, 556, 558, 554, 1716, 534, 538, 552, 544, 554, 544, 558, 546, 554, 552, 554, 554, 556, 558, 554, 548, 554, 538, 554, 542, 554, 544, 554, 548, 556, 550, 554, 554, 556, 558, 556, 546, 554, 538, 554, 540, 554, 544, 554, 548, 556, 550, 554, 556, 554, 558, 556, 546, 554, 538, 554, 540, 556, 544, 552, 548, 554, 552, 554, 556, 554, 558, 556, 546, 554, 538, 554, 540, 554, 544, 556, 546, 554, 552, 554, 554, 554, 560, 556, 546, 554, 538, 528, 566, 530, 568, 554, 548, 532, 576, 530, 580, 556, 582, 506, 596, 534, 558, 532, 1706, 544, 562, 506, 596, 530, 576, 504, 1730, 554, 560, 556, 1680, 556, 7984, 554, 536, 554, 542, 554, 544, 554, 548, 554, 552, 554, 556, 554, 560, 552, 548, 554, 538, 554, 1692, 554, 544, 556, 546, 556, 552, 556, 554, 554, 560, 554, 546, 554, 538, 554, 542, 552, 546, 554, 548, 554, 554, 552, 556, 552, 560, 552, 550, 552, 540, 552, 544, 552, 570, 530, 574, 530, 576, 528, 580, 530, 584, 528, 574, 528, 564, 528, 568, 528, 572, 526, 1726, 526, 1730, 524, 1758, 502, 588, 524, 578, 524, 570, 544, 552, 544, 554, 544, 558, 544, 562, 544, 566, 542, 570, 544, 558, 544, 572, 520, 1726, 520, 578, 520, 1734, 516, 1738, 520, 1740, 518, 594, 518, 570, 496};
const uint16_t rawTemp18[] = {9008, 4476, 534, 1708, 534, 1712, 532, 546, 554, 548, 554, 552, 554, 554, 556, 558, 554, 1718, 534, 538, 552, 1714, 532, 1716, 532, 548, 556, 550, 554, 554, 556, 558, 556, 546, 554, 538, 554, 540, 556, 544, 554, 548, 554, 552, 556, 554, 554, 558, 554, 546, 556, 534, 556, 1712, 534, 544, 554, 550, 554, 550, 554, 1726, 532, 560, 556, 546, 554, 536, 556, 540, 554, 546, 554, 548, 554, 552, 530, 580, 554, 558, 556, 546, 554, 538, 554, 540, 554, 544, 556, 548, 554, 552, 554, 554, 554, 558, 554, 534, 554, 7984, 556, 536, 556, 540, 554, 544, 554, 548, 552, 554, 552, 556, 556, 558, 554, 1716, 534, 538, 552, 544, 554, 544, 558, 546, 554, 552, 554, 554, 556, 558, 554, 548, 554, 538, 554, 542, 554, 544, 554, 548, 556, 550, 554, 554, 556, 558, 556, 546, 554, 538, 554, 540, 554, 544, 554, 548, 556, 550, 554, 556, 554, 558, 556, 546, 554, 538, 554, 540, 556, 544, 552, 548, 554, 552, 554, 556, 554, 558, 556, 546, 554, 538, 554, 540, 554, 544, 556, 546, 554, 552, 554, 554, 554, 560, 556, 546, 554, 538, 528, 566, 530, 568, 554, 548, 532, 576, 530, 580, 556, 582, 506, 596, 534, 558, 532, 1706, 544, 562, 506, 596, 530, 576, 504, 1730, 554, 560, 556, 1680, 556, 7984, 554, 536, 554, 542, 554, 544, 554, 548, 554, 552, 554, 556, 554, 560, 552, 548, 554, 538, 554, 1692, 554, 544, 556, 546, 556, 552, 556, 554, 554, 560, 554, 546, 554, 538, 554, 542, 552, 546, 554, 548, 554, 554, 552, 556, 552, 560, 552, 550, 552, 540, 552, 544, 552, 570, 530, 574, 530, 576, 528, 580, 530, 584, 528, 574, 528, 564, 528, 568, 528, 572, 526, 1726, 526, 1730, 524, 1758, 502, 588, 524, 578, 524, 570, 544, 552, 544, 554, 544, 558, 544, 562, 544, 566, 542, 570, 544, 558, 544, 572, 520, 1726, 520, 578, 520, 1734, 516, 1738, 520, 1740, 518, 594, 518, 570, 496};
const uint16_t rawTemp19[] = {9010, 4454, 554, 1708, 534, 1714, 534, 544, 556, 548, 554, 552, 556, 554, 554, 558, 556, 1716, 534, 538, 554, 1712, 508, 1740, 534, 548, 554, 552, 556, 554, 554, 558, 554, 546, 556, 536, 554, 542, 554, 546, 556, 548, 554, 552, 554, 554, 554, 558, 556, 546, 554, 538, 554, 1712, 534, 544, 554, 548, 554, 1724, 532, 1726, 508, 584, 554, 548, 556, 538, 554, 542, 556, 544, 554, 548, 556, 550, 554, 556, 554, 560, 556, 546, 554, 538, 554, 542, 552, 546, 554, 548, 556, 550, 554, 556, 556, 558, 556, 532, 556, 7984, 554, 538, 556, 540, 556, 544, 554, 550, 554, 550, 556, 554, 554, 558, 554, 1718, 534, 536, 554, 542, 554, 544, 556, 546, 556, 550, 556, 554, 554, 558, 554, 548, 554, 538, 554, 542, 552, 546, 556, 546, 556, 552, 554, 554, 554, 558, 554, 546, 554, 538, 556, 540, 532, 568, 556, 548, 554, 552, 554, 554, 556, 558, 554, 546, 556, 536, 554, 542, 556, 544, 554, 548, 554, 552, 556, 554, 532, 580, 556, 548, 532, 560, 530, 566, 534, 566, 530, 572, 532, 578, 556, 574, 534, 578, 534, 570, 532, 560, 534, 562, 530, 568, 530, 572, 504, 578, 560, 574, 530, 558, 554, 548, 556, 536, 554, 1692, 554, 544, 554, 548, 572, 1684, 552, 1708, 552, 558, 554, 1686, 552, 8006, 514, 560, 552, 542, 554, 544, 554, 548, 554, 552, 554, 554, 554, 560, 554, 548, 552, 538, 554, 1712, 532, 546, 554, 550, 552, 554, 552, 556, 554, 560, 552, 548, 552, 542, 552, 566, 530, 570, 528, 574, 528, 578, 528, 582, 528, 584, 528, 574, 528, 564, 526, 570, 526, 572, 526, 576, 526, 580, 526, 584, 524, 590, 546, 556, 544, 548, 544, 552, 544, 554, 544, 1732, 520, 1736, 520, 1740, 520, 594, 520, 582, 520, 572, 520, 576, 520, 580, 520, 584, 518, 586, 520, 590, 520, 594, 518, 582, 520, 572, 520, 1726, 520, 580, 518, 1734, 518, 1738, 518, 1742, 518, 596, 518, 570, 494};
const uint16_t rawTemp20[] = {9012, 4452, 554, 1708, 532, 1714, 536, 542, 554, 548, 556, 550, 554, 556, 554, 558, 554, 1718, 532, 538, 554, 1712, 532, 1718, 534, 546, 554, 552, 556, 554, 554, 558, 556, 546, 554, 538, 554, 542, 556, 544, 556, 546, 554, 554, 552, 556, 554, 560, 554, 548, 554, 538, 556, 1712, 534, 546, 554, 548, 554, 552, 554, 556, 554, 1728, 534, 548, 554, 538, 552, 542, 554, 546, 552, 550, 554, 552, 554, 556, 554, 558, 554, 546, 554, 538, 556, 540, 554, 546, 554, 548, 554, 550, 556, 554, 554, 560, 552, 536, 554, 7984, 554, 538, 554, 540, 554, 544, 556, 546, 554, 552, 554, 556, 554, 558, 556, 1716, 534, 536, 554, 542, 554, 544, 554, 548, 554, 552, 554, 556, 552, 560, 554, 546, 556, 536, 554, 542, 554, 546, 554, 548, 554, 554, 554, 556, 554, 558, 556, 546, 554, 538, 556, 540, 554, 544, 554, 550, 554, 552, 554, 556, 554, 560, 554, 548, 554, 536, 556, 540, 556, 544, 554, 548, 554, 552, 552, 556, 554, 560, 554, 546, 556, 536, 554, 542, 554, 544, 556, 548, 554, 552, 554, 554, 556, 558, 556, 544, 556, 538, 528, 566, 554, 544, 530, 572, 556, 552, 530, 580, 532, 584, 556, 568, 506, 586, 532, 1706, 544, 564, 534, 568, 532, 574, 530, 578, 532, 1704, 534, 1706, 554, 8004, 524, 576, 526, 542, 554, 546, 556, 546, 554, 552, 554, 556, 552, 560, 554, 548, 554, 538, 552, 1694, 554, 544, 554, 548, 554, 552, 554, 556, 556, 558, 554, 548, 554, 538, 552, 542, 554, 546, 554, 548, 554, 552, 554, 556, 552, 560, 552, 548, 554, 540, 552, 544, 552, 570, 530, 572, 530, 576, 530, 580, 530, 584, 528, 574, 528, 564, 528, 568, 528, 570, 526, 1726, 528, 1728, 526, 1734, 524, 588, 524, 576, 524, 570, 546, 550, 544, 556, 544, 558, 544, 562, 544, 564, 544, 568, 544, 558, 544, 570, 520, 1726, 520, 578, 520, 1732, 520, 1736, 520, 1740, 520, 594, 520, 568, 496};
const uint16_t rawTemp21[] = {9014, 4450, 558, 1706, 534, 1712, 532, 544, 556, 546, 554, 552, 556, 554, 554, 558, 556, 1716, 532, 538, 556, 1712, 534, 1714, 534, 546, 556, 550, 556, 554, 554, 558, 556, 544, 532, 560, 554, 542, 554, 544, 554, 548, 554, 552, 554, 556, 536, 576, 554, 548, 554, 538, 556, 1712, 534, 544, 554, 548, 554, 1722, 534, 554, 556, 1728, 534, 548, 554, 538, 554, 542, 554, 544, 556, 546, 554, 554, 552, 556, 554, 560, 554, 546, 554, 536, 554, 542, 554, 544, 554, 548, 556, 550, 554, 556, 554, 560, 554, 534, 554, 7984, 554, 538, 530, 566, 554, 544, 530, 572, 554, 552, 554, 554, 556, 558, 554, 1718, 536, 536, 554, 542, 554, 544, 554, 548, 554, 550, 550, 560, 554, 560, 554, 548, 556, 536, 556, 540, 556, 544, 554, 548, 554, 552, 556, 554, 556, 558, 554, 546, 554, 538, 530, 566, 554, 546, 554, 548, 532, 576, 556, 554, 546, 568, 556, 546, 530, 560, 532, 564, 532, 568, 556, 550, 556, 572, 538, 572, 536, 578, 534, 566, 534, 560, 560, 534, 534, 566, 536, 568, 534, 572, 534, 574, 534, 554, 560, 544, 558, 530, 560, 536, 556, 540, 556, 548, 552, 552, 554, 556, 554, 558, 554, 548, 554, 538, 554, 1692, 532, 566, 556, 546, 556, 1722, 536, 554, 554, 1728, 536, 1702, 510, 8028, 534, 538, 554, 542, 554, 546, 554, 548, 554, 552, 554, 556, 552, 560, 554, 550, 552, 562, 530, 1714, 530, 570, 530, 574, 530, 576, 528, 582, 528, 584, 528, 574, 526, 564, 526, 570, 526, 572, 526, 576, 524, 582, 524, 586, 524, 590, 522, 578, 546, 546, 546, 550, 546, 554, 546, 558, 544, 562, 544, 566, 544, 568, 544, 558, 544, 548, 544, 574, 520, 578, 520, 1732, 520, 1736, 520, 1740, 520, 592, 520, 582, 520, 572, 520, 576, 520, 580, 520, 584, 520, 586, 520, 590, 520, 594, 520, 582, 520, 572, 518, 1728, 518, 580, 520, 1734, 518, 1762, 494, 1766, 494, 594, 520, 570, 494};
const uint16_t rawTemp22[] = {9012, 4472, 534, 1708, 536, 1710, 534, 544, 556, 546, 554, 552, 554, 554, 556, 556, 556, 1718, 534, 536, 554, 1712, 534, 1716, 508, 572, 554, 552, 554, 556, 554, 558, 556, 546, 554, 538, 554, 542, 554, 544, 554, 548, 554, 552, 530, 580, 556, 558, 554, 548, 556, 536, 554, 1714, 532, 544, 556, 548, 554, 552, 554, 1726, 532, 1732, 534, 546, 556, 536, 554, 542, 554, 544, 554, 548, 554, 552, 556, 554, 556, 558, 528, 572, 556, 536, 554, 542, 556, 544, 556, 548, 554, 552, 554, 554, 556, 558, 554, 534, 554, 7984, 554, 538, 554, 542, 554, 544, 556, 546, 556, 550, 556, 554, 554, 558, 556, 1716, 534, 536, 554, 542, 554, 546, 556, 546, 556, 550, 556, 554, 554, 560, 554, 546, 554, 538, 554, 542, 554, 544, 556, 548, 554, 552, 556, 554, 556, 558, 556, 546, 556, 536, 530, 566, 552, 546, 556, 548, 556, 550, 556, 554, 530, 582, 554, 546, 554, 538, 532, 564, 558, 542, 530, 572, 556, 550, 532, 578, 534, 604, 510, 592, 534, 558, 532, 564, 534, 566, 534, 568, 534, 572, 530, 558, 582, 552, 504, 572, 558, 558, 528, 540, 530, 568, 554, 548, 554, 552, 578, 532, 554, 560, 554, 548, 576, 514, 554, 1692, 554, 544, 554, 548, 554, 552, 554, 1724, 538, 1706, 554, 1704, 536, 8002, 536, 536, 554, 542, 554, 546, 554, 550, 554, 554, 552, 556, 554, 558, 554, 550, 552, 540, 552, 1714, 532, 546, 552, 574, 528, 578, 530, 580, 530, 584, 530, 572, 528, 564, 528, 570, 528, 572, 526, 576, 526, 580, 528, 582, 526, 588, 524, 578, 524, 568, 524, 574, 530, 570, 546, 556, 546, 562, 544, 564, 544, 568, 544, 556, 546, 548, 544, 552, 544, 554, 544, 1732, 520, 1734, 520, 1740, 520, 594, 520, 582, 520, 572, 520, 576, 520, 578, 520, 582, 520, 586, 520, 590, 520, 594, 520, 582, 520, 572, 518, 1728, 518, 578, 520, 1734, 518, 1738, 518, 1766, 494, 594, 520, 570, 504};
const uint16_t rawTemp23[] = {9014, 4450, 530, 1734, 508, 1738, 508, 568, 532, 572, 530, 576, 530, 578, 530, 582, 532, 1742, 508, 562, 532, 1736, 508, 1740, 506, 574, 556, 550, 532, 578, 530, 584, 578, 524, 532, 558, 532, 564, 532, 566, 532, 572, 530, 576, 530, 578, 532, 582, 530, 570, 532, 560, 530, 1738, 510, 566, 532, 570, 532, 1748, 508, 1750, 508, 1756, 508, 570, 530, 562, 532, 564, 532, 568, 530, 572, 530, 576, 532, 578, 532, 580, 532, 570, 556, 536, 530, 566, 530, 568, 558, 546, 530, 576, 532, 578, 530, 582, 530, 558, 530, 8008, 554, 538, 530, 566, 530, 568, 530, 572, 530, 576, 530, 580, 554, 558, 530, 1742, 532, 538, 530, 566, 554, 546, 530, 572, 530, 576, 530, 578, 532, 582, 532, 568, 530, 562, 532, 564, 530, 568, 532, 570, 532, 574, 532, 578, 532, 582, 532, 570, 530, 562, 532, 564, 532, 568, 534, 570, 532, 572, 534, 576, 552, 562, 532, 594, 534, 560, 534, 560, 534, 566, 534, 568, 534, 574, 532, 578, 504, 586, 582, 542, 504, 562, 554, 542, 554, 546, 554, 548, 556, 550, 554, 556, 554, 558, 556, 546, 578, 514, 578, 518, 578, 522, 576, 526, 554, 552, 554, 556, 556, 558, 554, 546, 556, 536, 554, 1692, 530, 570, 530, 572, 554, 1702, 554, 1706, 554, 1730, 508, 1730, 532, 8008, 532, 538, 554, 542, 554, 546, 552, 550, 552, 554, 552, 580, 530, 584, 530, 572, 530, 562, 528, 1716, 530, 570, 528, 576, 528, 578, 528, 582, 528, 586, 526, 574, 528, 566, 526, 570, 524, 574, 524, 580, 524, 584, 546, 564, 544, 568, 546, 558, 544, 548, 544, 552, 544, 578, 522, 580, 520, 586, 520, 590, 520, 592, 522, 580, 520, 572, 520, 574, 522, 578, 522, 1730, 522, 1734, 520, 1740, 520, 592, 520, 580, 520, 572, 520, 576, 520, 580, 520, 582, 520, 586, 520, 590, 520, 594, 520, 582, 518, 572, 520, 1728, 518, 580, 520, 1734, 518, 1738, 518, 1764, 494, 594, 520, 568, 496};
const uint16_t rawTemp24[] = {9014, 4450, 530, 1734, 534, 1712, 508, 568, 532, 572, 530, 576, 530, 578, 532, 582, 530, 1744, 508, 560, 530, 1738, 508, 1740, 532, 548, 530, 576, 532, 578, 530, 582, 530, 570, 556, 536, 532, 564, 532, 566, 530, 572, 532, 574, 532, 578, 530, 582, 556, 544, 532, 560, 530, 1738, 532, 544, 532, 570, 530, 576, 532, 578, 530, 582, 530, 1744, 508, 562, 532, 564, 532, 568, 532, 572, 532, 574, 532, 578, 556, 556, 530, 572, 554, 538, 530, 566, 530, 568, 532, 572, 530, 576, 532, 578, 532, 582, 532, 556, 530, 8010, 530, 560, 556, 540, 530, 568, 530, 572, 532, 574, 530, 580, 554, 558, 554, 1720, 510, 560, 530, 564, 532, 568, 530, 572, 554, 550, 532, 578, 554, 558, 530, 572, 530, 562, 532, 564, 556, 542, 532, 572, 530, 574, 544, 566, 532, 582, 532, 570, 530, 562, 532, 564, 532, 568, 532, 572, 530, 576, 532, 578, 532, 582, 530, 572, 506, 586, 508, 588, 560, 564, 508, 594, 536, 572, 534, 574, 534, 580, 536, 566, 534, 558, 532, 540, 560, 564, 504, 572, 530, 574, 554, 554, 554, 558, 556, 546, 554, 538, 554, 542, 556, 544, 554, 548, 578, 528, 578, 532, 578, 534, 556, 546, 556, 536, 554, 1692, 554, 546, 554, 548, 554, 552, 530, 580, 554, 558, 554, 534, 554, 7986, 552, 538, 554, 542, 554, 544, 554, 550, 554, 552, 554, 558, 552, 562, 552, 550, 552, 540, 552, 1714, 532, 570, 528, 574, 530, 576, 530, 580, 528, 584, 528, 572, 528, 564, 528, 570, 526, 572, 528, 576, 526, 580, 526, 586, 524, 588, 524, 580, 542, 548, 548, 548, 544, 554, 544, 558, 544, 584, 522, 566, 544, 592, 522, 580, 522, 570, 522, 574, 520, 578, 522, 1732, 520, 1736, 518, 1740, 520, 592, 522, 580, 520, 572, 520, 576, 520, 578, 520, 582, 520, 586, 520, 590, 520, 594, 520, 580, 520, 572, 520, 1726, 520, 578, 520, 1732, 520, 1736, 520, 1742, 518, 594, 518, 570, 520};
const uint16_t rawTemp25[] = {9018, 4450, 530, 1734, 506, 1740, 508, 568, 530, 572, 530, 576, 532, 578, 530, 582, 530, 1746, 508, 562, 530, 1738, 508, 1740, 508, 572, 532, 574, 532, 578, 530, 582, 530, 570, 532, 560, 530, 566, 530, 568, 532, 570, 532, 574, 532, 578, 530, 582, 532, 568, 532, 560, 530, 1740, 506, 570, 532, 570, 530, 1750, 506, 580, 532, 580, 532, 1744, 508, 562, 532, 564, 532, 568, 532, 572, 530, 574, 530, 580, 532, 582, 530, 572, 532, 560, 530, 566, 530, 568, 532, 572, 530, 576, 530, 578, 530, 584, 530, 558, 532, 8010, 532, 560, 530, 566, 532, 568, 532, 570, 532, 576, 530, 578, 530, 582, 532, 1742, 508, 562, 532, 562, 532, 568, 532, 572, 530, 576, 532, 578, 532, 582, 530, 570, 530, 562, 532, 564, 530, 568, 532, 570, 532, 574, 530, 578, 532, 580, 530, 572, 530, 562, 530, 566, 532, 568, 530, 572, 530, 576, 532, 578, 530, 582, 532, 570, 534, 560, 558, 562, 534, 566, 536, 566, 536, 570, 534, 576, 534, 580, 532, 570, 532, 560, 530, 540, 558, 566, 526, 550, 554, 550, 556, 554, 556, 558, 554, 546, 554, 538, 554, 540, 580, 520, 578, 524, 578, 528, 554, 556, 554, 558, 556, 546, 554, 538, 554, 1692, 554, 544, 554, 548, 536, 1722, 552, 556, 530, 582, 530, 558, 554, 8008, 532, 538, 554, 542, 552, 546, 554, 548, 554, 552, 554, 558, 552, 560, 552, 572, 530, 562, 530, 1716, 530, 570, 528, 574, 530, 576, 528, 580, 528, 586, 528, 574, 528, 566, 526, 568, 526, 574, 526, 576, 526, 582, 524, 586, 524, 590, 524, 578, 546, 546, 546, 550, 544, 554, 544, 558, 544, 584, 522, 566, 544, 592, 522, 580, 522, 570, 522, 574, 520, 578, 522, 1732, 520, 1736, 520, 1740, 520, 592, 522, 580, 520, 572, 520, 576, 520, 578, 520, 582, 520, 586, 520, 590, 520, 592, 520, 582, 520, 572, 520, 1726, 520, 578, 520, 1732, 520, 1762, 494, 1742, 518, 594, 518, 570, 496};

// IR Command Lists
IRCommand powerCommands[] = {
  { "on", rawPowerOn, sizeof(rawPowerOn) / sizeof(rawPowerOn[0]), "Power ON" },
  { "off", rawPowerOff, sizeof(rawPowerOff) / sizeof(rawPowerOff[0]), "Power OFF" },
};

IRCommand tempCommands[] = {
  { "16", rawTemp16, sizeof(rawTemp16) / sizeof(rawTemp16[0]), "Temperature 16°C" },
  { "17", rawTemp17, sizeof(rawTemp17) / sizeof(rawTemp17[0]), "Temperature 17°C" },
  { "18", rawTemp18, sizeof(rawTemp18) / sizeof(rawTemp18[0]), "Temperature 18°C" },
  { "19", rawTemp19, sizeof(rawTemp19) / sizeof(rawTemp19[0]), "Temperature 19°C" },
  { "20", rawTemp20, sizeof(rawTemp20) / sizeof(rawTemp20[0]), "Temperature 20°C" },
  { "21", rawTemp21, sizeof(rawTemp21) / sizeof(rawTemp21[0]), "Temperature 21°C" },
  { "22", rawTemp22, sizeof(rawTemp22) / sizeof(rawTemp22[0]), "Temperature 22°C" },
  { "23", rawTemp23, sizeof(rawTemp23) / sizeof(rawTemp23[0]), "Temperature 23°C" },
  { "24", rawTemp24, sizeof(rawTemp24) / sizeof(rawTemp24[0]), "Temperature 24°C" },
  { "25", rawTemp25, sizeof(rawTemp25) / sizeof(rawTemp25[0]), "Temperature 25°C" },
};

// Last States
String lastPowerState = "";
String lastTempState = "";

// Timing Variables
unsigned long lastUpdate = 0;

void logMessage(const String& message) {
  Serial.printf("[%.3f] %s\n", millis() / 1000.0, message.c_str());
}

void connectToWiFi() {
  logMessage("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  logMessage("Connected to WiFi! IP Address: " + WiFi.localIP().toString());
}

void ensureWiFiConnected() {
  if (WiFi.status() != WL_CONNECTED) {
    logMessage("WiFi disconnected, reconnecting...");
    connectToWiFi();
  }
}

String getPayload() {
  HTTPClient http;
  WiFiClient client;
  String payload = "";
  int retryCount = 0;

  http.setTimeout(HTTP_TIMEOUT);

  while (retryCount < MAX_HTTP_RETRIES) {
    http.begin(client, baseURL);
    int httpCode = http.GET();

    if (httpCode == HTTP_CODE_OK) {
      payload = http.getString();
      logMessage("Received payload: " + payload);
      http.end();
      return payload;
    } else {
      logMessage("HTTP request failed, error: " + String(http.errorToString(httpCode)));
      retryCount++;
      delay(1000);  // Wait before retry
    }
    http.end();
  }

  logMessage("Max HTTP retries reached, returning empty payload");
  return "";
}

bool findAndSend(const String& cmd, IRCommand* commands, size_t count, String& lastState) {
  for (size_t i = 0; i < count; i++) {
    if (cmd == commands[i].name) {
      if (cmd == lastState) {
        logMessage("Command " + cmd + " ignored (same state)");
        return true;
      }
      irsend.sendRaw(commands[i].rawData, commands[i].rawLength, kFrequency);
      logMessage("Sending: " + String(commands[i].description));
      lastState = cmd;
      return true;
    }
  }
  return false;
}

void processCommand(const String& cmd) {
  if (findAndSend(cmd, powerCommands, sizeof(powerCommands) / sizeof(powerCommands[0]), lastPowerState)) return;
  if (findAndSend(cmd, tempCommands, sizeof(tempCommands) / sizeof(tempCommands[0]), lastTempState)) return;

  logMessage("Unrecognized command: " + cmd);
}

void processPayload(const String& payload) {
  if (payload.isEmpty()) {
    logMessage("Empty payload received");
    return;
  }

  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, payload);

  if (error) {
    logMessage("JSON parsing failed: " + String(error.c_str()));
    logMessage("Raw payload: " + payload);
    return;
  }

  JsonArray devicesArray = doc.as<JsonArray>();
  if (devicesArray.isNull() || devicesArray.size() == 0) {
    logMessage("No devices found in payload");
    return;
  }

  for (JsonObject device : devicesArray) {
    if (!device.containsKey("deviceId") || !device.containsKey("data")) {
      logMessage("Invalid device format");
      continue;
    }

    String deviceId = device["deviceId"].as<String>();
    JsonObject data = device["data"];
    if (!data.containsKey("value") || !data.containsKey("status")) {
      logMessage("Invalid data format for device: " + deviceId);
      continue;
    }

    int value = data["value"];
    String status = data["status"].as<String>();

    logMessage("=== Device Info ===");
    logMessage("Device ID: " + deviceId);
    logMessage("Value: " + String(value));
    logMessage("Status: " + status);

    if (status == "off") {
      processCommand("off");
    } else {
      processCommand("on");
      unsigned long startTime = millis();
      while (millis() - startTime < 2000) {
        yield();  // Prevent watchdog reset
      }
      if (value >= 16 && value <= 25) {
        processCommand(String(value));
      } else {
        logMessage("Invalid temperature value: " + String(value));
      }
    }
  }
}

void setup() {
  Serial.begin(115200);
  irsend.begin();
  logMessage("Samsung AC Remote Ready (Using Raw IR Data)");
  logMessage("Categories:");
  logMessage("- Power: on, off");
  logMessage("- Temperature: 16, 17, 18, 19, 20, 21, 22, 23, 24, 25");
  connectToWiFi();
}

void loop() {
  ensureWiFiConnected();
  unsigned long now = millis();
  if (now - lastUpdate >= UPDATE_INTERVAL) {
    String payload = getPayload();
    processPayload(payload);
    lastUpdate = now;
  }
}